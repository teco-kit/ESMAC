package de.kit.esmserver.uicomponents;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;

import com.vaadin.event.DataBoundTransferable;
import com.vaadin.event.dd.DragAndDropEvent;
import com.vaadin.event.dd.DropHandler;
import com.vaadin.event.dd.acceptcriteria.AcceptAll;
import com.vaadin.event.dd.acceptcriteria.AcceptCriterion;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.DragAndDropWrapper;
import com.vaadin.ui.Notification;
import com.vaadin.ui.OptionGroup;
import com.vaadin.ui.Panel;
import com.vaadin.ui.Tree;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

import de.kit.esmserver.uicomponents.question.AbstractQuestionComponent;
import de.kit.esmserver.uicomponents.question.LikertQuestionComponent;
import de.kit.esmserver.uicomponents.question.MultiAnswerQuestionComponent;
import de.kit.esmserver.uicomponents.question.OpenQuestionComponent;
import de.kit.esmserver.uicomponents.question.SliderQuestionComponent;
import de.kit.esmserver.uicomponents.question.conditional.AbstractConditionalQuestion;
import de.kit.esmserver.uicomponents.question.conditional.LikertQuestionConditionalComponent;
import de.kit.esmserver.uicomponents.question.conditional.MultiAnswerQuestionConditional;
import de.kit.esmserver.uicomponents.question.conditional.SliderQuestionConditionalComponent;

public class ScreenComponent extends AbstractWritableComponent {

	private static final long serialVersionUID = 4246136105748393077L;
	private DragAndDropWrapper dragAndDropWrapper;
	private VerticalLayout mainLayout;
	private List<AbstractWritableComponent> components;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public ScreenComponent(String Count) {
		Panel p = buildMainLayout();
		p.setCaption("Screen " + Count);
		components = new ArrayList<AbstractWritableComponent>();
		setCompositionRoot(dragAndDropWrapper);
	}

	private Panel buildMainLayout() {
		mainLayout = new VerticalLayout();
		dragAndDropWrapper = new DragAndDropWrapper(panel);
		dragAndDropWrapper.setDropHandler(new DropHandler() {

			private static final long serialVersionUID = -5962996774673944382L;

			@Override
			public AcceptCriterion getAcceptCriterion() {
				return AcceptAll.get();
			}

			@Override
			public void drop(DragAndDropEvent event) {
				if (event.getTransferable().getSourceComponent() instanceof Tree) {
					Tree tree = (Tree) event.getTransferable()
							.getSourceComponent();
					DataBoundTransferable t = (DataBoundTransferable) event
							.getTransferable();
					if (t.getItemId().equals("Open Question")) {
						OpenQuestionComponent openQuestion = new OpenQuestionComponent();
						openQuestion.setAlignmentMiddleCenter();
						components.add(openQuestion);
						mainLayout.addComponent(openQuestion);
						addNavigationButtonsToLayout(openQuestion);
					} else if (tree.getItemCaption(t.getItemId()).equals(
							"Select One Question")
							|| tree.getItemCaption(t.getItemId()).equals(
									"Select Many Question")) {
						if ((tree.getParent(t.getItemId())
								.equals("Conditional Question"))) {
							MultiAnswerQuestionConditional mulitAnswerQuestionConditional = new MultiAnswerQuestionConditional(
									tree.getItemCaption(t.getItemId()));
							UI.getCurrent().addWindow(
									new ConditionedQuestionWindow(
											mulitAnswerQuestionConditional));
						} else {
							MultiAnswerQuestionComponent multiAnswer = new MultiAnswerQuestionComponent(
									tree.getItemCaption(t.getItemId()));
							multiAnswer.setAlignmentMiddleCenter();
							components.add(multiAnswer);
							mainLayout.addComponent(multiAnswer);
							addNavigationButtonsToLayout(multiAnswer);
						}
					} else if (tree.getItemCaption(t.getItemId()).equals(
							"Likert Question")) {
						if ((tree.getParent(t.getItemId())
								.equals("Conditional Question"))) {
							LikertQuestionConditionalComponent likertQuestionConditionalComponent = new LikertQuestionConditionalComponent();
							UI.getCurrent()
									.addWindow(
											new ConditionedQuestionWindow(
													likertQuestionConditionalComponent));
						} else {
							LikertQuestionComponent likertQuestion = new LikertQuestionComponent();
							likertQuestion.setAlignmentMiddleCenter();
							components.add(likertQuestion);
							mainLayout.addComponent(likertQuestion);
							addNavigationButtonsToLayout(likertQuestion);
						}
					} else if (tree.getItemCaption(t.getItemId()).equals(
							"Slider Question")) {
						if ((tree.getParent(t.getItemId())
								.equals("Conditional Question"))) {
							SliderQuestionConditionalComponent visualAnalogQuestionConditionalComponent = new SliderQuestionConditionalComponent();
							UI.getCurrent()
									.addWindow(
											new ConditionedQuestionWindow(
													visualAnalogQuestionConditionalComponent));
						} else {
							SliderQuestionComponent visualAnalogQuestion = new SliderQuestionComponent();
							visualAnalogQuestion.setAlignmentMiddleCenter();
							components.add(visualAnalogQuestion);
							mainLayout.addComponent(visualAnalogQuestion);
							addNavigationButtonsToLayout(visualAnalogQuestion);
						}

					}
				}

			}
		});

		mainLayout.setWidth(String.valueOf(UI.getCurrent().getPage()
				.getBrowserWindowWidth() - 650));
		panel.setContent(mainLayout);

		return panel;
	}

	@Override
	public void writeXML(XMLStreamWriter writer) throws XMLStreamException {
		writer.writeStartElement("screen");
		for (AbstractWritableComponent component : components) {
			component.writeXML(writer);
		}
		writer.writeEndElement();
	}

	@Override
	public boolean isValid() {
		boolean isValid = true;
		for (AbstractWritableComponent component : components) {
			isValid = isValid && component.isValid();
		}
		if (isValid && !components.isEmpty()) {
			return true;
		} else {
			showNotificationForFailure();
			return false;
		}
	}

	private void showNotificationForFailure() {
		if (components.isEmpty()) {
			Notification.show(
					"There must be one or more questions on a screen.",
					Notification.Type.ERROR_MESSAGE);
		} else if (checkComponentsForDuplicates()) {

		} else {
			Notification.show(
					"There are invalid fields in your added questions",
					Notification.Type.ERROR_MESSAGE);
		}

	}

	private boolean checkComponentsForDuplicates() {
		for (AbstractWritableComponent component : components) {
			if (component instanceof MultiAnswerQuestionComponent) {
				MultiAnswerQuestionComponent multiAnswerQuestionComponent = (MultiAnswerQuestionComponent) component;
				if (multiAnswerQuestionComponent.checkAnswersForDuplicates()) {
					Notification.show("Please avoid duplicated answers in "
							+ multiAnswerQuestionComponent.getCaption() + " : "
							+ multiAnswerQuestionComponent.getName() + "!",
							Notification.Type.ERROR_MESSAGE);
					return true;
				}
			} else if (component instanceof MultiAnswerQuestionConditional) {
				MultiAnswerQuestionConditional multiAnswerQuestionConditional = (MultiAnswerQuestionConditional) component;
				if (multiAnswerQuestionConditional.checkAnswersForDuplicates()) {
					Notification.show("Please avoid duplicated answers in "
							+ multiAnswerQuestionConditional.getCaption()
							+ " Conditional : "
							+ multiAnswerQuestionConditional.getName() + "!",
							Notification.Type.ERROR_MESSAGE);
					return true;
				}
			}
		}
		return false;
	}

	private void addNavigationButtonsToLayout(
			final AbstractQuestionComponent customComponent) {
		Button upButton = new Button("˄");
		Button downButton = new Button("˅");
		Button removeButton = new Button("-");

		upButton.addClickListener(new ClickListener() {

			private static final long serialVersionUID = -2042649914005664176L;

			@Override
			public void buttonClick(ClickEvent event) {
				int index = components.indexOf(customComponent);
				if (index > 0) {
					components.remove(customComponent);
					components.add(index - 1, customComponent);
					mainLayout.removeComponent(customComponent);
					mainLayout.addComponent(customComponent, index - 1);
				}
			}
		});

		downButton.addClickListener(new ClickListener() {

			private static final long serialVersionUID = -104282149213538648L;

			@Override
			public void buttonClick(ClickEvent event) {
				int index = components.indexOf(customComponent);
				if (index < components.size() - 1) {
					components.remove(customComponent);
					components.add(index + 1, customComponent);
					mainLayout.removeComponent(customComponent);
					mainLayout.addComponent(customComponent, index + 1);
				}
			}
		});

		removeButton.addClickListener(new ClickListener() {

			private static final long serialVersionUID = -8936044043119058212L;

			@Override
			public void buttonClick(ClickEvent event) {
				components.remove(customComponent);
				mainLayout.removeComponent(customComponent);
			}
		});
		customComponent.addComponentToLayout(upButton);
		customComponent.addComponentToLayout(downButton);
		customComponent.addComponentToLayout(removeButton);

	}

	class ConditionedQuestionWindow extends Window {

		private static final long serialVersionUID = 5702410994742872418L;

		public ConditionedQuestionWindow(
				final AbstractConditionalQuestion conditionalComponent) {
			super("Please choose the conditioned Question!");

			VerticalLayout content = new VerticalLayout();
			final OptionGroup optionGroup = new OptionGroup();
			optionGroup.setMultiSelect(false);
			optionGroup.addItem("Open Question");
			optionGroup.addItem("Select One Question");
			optionGroup.addItem("Select Many Question");
			optionGroup.addItem("Likert Question");
			optionGroup.addItem("Slider Question");
			content.addComponent(optionGroup);
			content.setMargin(true);
			setContent(content);

			// Disable the close button
			setClosable(false);
			center();
			setModal(true);
			setWidth("400");

			// Trivial logic for closing the sub-window
			Button ok = new Button("OK");
			ok.addClickListener(new ClickListener() {

				private static final long serialVersionUID = -7156569573193799367L;

				public void buttonClick(ClickEvent event) {
					if (optionGroup.getValue() != null) {
						conditionalComponent.setConditionedQuestion(optionGroup
								.getValue().toString());
						components.add(conditionalComponent);
						mainLayout.addComponent(conditionalComponent);
						addNavigationButtonsToLayout(conditionalComponent);
						conditionalComponent.setAlignmentMiddleCenter();
						close();
					} else {
						Notification.show(
								"Please choose a conditioned Question",
								Notification.Type.ERROR_MESSAGE);
					}

				}
			});
			content.addComponent(ok);
		}
	}

}
