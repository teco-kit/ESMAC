package de.kit.esmserver.uicomponents.question;

import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TextField;

import de.kit.esmserver.uicomponents.validators.IntegerValidator;
import de.kit.esmserver.uicomponents.validators.MinMaxValidator;
import de.kit.esmserver.uicomponents.validators.NotNullValidator;

public class LikertQuestionComponent extends AbstractQuestionComponent {

	private static final long serialVersionUID = -8515361362368236403L;
	protected GridLayout mainLayout;
	protected TextField textfieldValue;
	protected TextField minBoundField;
	protected TextField maxBoundField;
	protected TextField minDescriptionField;
	protected TextField maxDescriptionField;
	private IntegerValidator digitValidator;
	private NotNullValidator notNullValidator;
	protected MinMaxValidator minMaxValidator;

	public LikertQuestionComponent() {
		digitValidator = new IntegerValidator(false, false);
		notNullValidator = new NotNullValidator();

		buildMainLayout();
	}

	@AutoGenerated
	protected Panel buildMainLayout() {
		mainLayout = new GridLayout(6, 1);

		Label labelName = new Label();
		labelName.setImmediate(true);
		labelName.setValue("Question");
		mainLayout.addComponent(labelName);

		textfieldValue = new TextField();
		textfieldValue.setImmediate(true);
		textfieldValue.setValidationVisible(true);
		textfieldValue.setWidth("150");
		textfieldValue.addValidator(notNullValidator);
		mainLayout.addComponent(textfieldValue);

		Label minBoundLabel = new Label("Min. Bound");
		minBoundLabel.setImmediate(true);
		mainLayout.addComponent(minBoundLabel);

		minBoundField = new TextField();
		minBoundField.setImmediate(true);
		minBoundField.setValidationVisible(true);
		minBoundField.setWidth("150");
		minBoundField.setValue("1");
		minBoundField.addValidator(digitValidator);
		mainLayout.addComponent(minBoundField);

		Label maxBoundLabel = new Label("Max. Bound");
		maxBoundLabel.setImmediate(true);
		mainLayout.addComponent(maxBoundLabel);

		maxBoundField = new TextField();
		maxBoundField.setImmediate(true);
		maxBoundField.setValidationVisible(true);
		maxBoundField.setWidth("150");
		maxBoundField.setValue("5");
		maxBoundField.addValidator(digitValidator);
		mainLayout.addComponent(maxBoundField);

		minMaxValidator = new MinMaxValidator(minBoundField, maxBoundField);
		maxBoundField.addValidator(minMaxValidator);
		minBoundField.addValidator(minMaxValidator);

		mainLayout.addComponent(new Label("Min. Description"));
		minDescriptionField = new TextField();
		minDescriptionField.setImmediate(true);
		minDescriptionField.setValidationVisible(true);
		minDescriptionField.setWidth("150");
		minDescriptionField.addValidator(notNullValidator);
		mainLayout.addComponent(minDescriptionField);

		mainLayout.addComponent(new Label("Max. Description"));
		maxDescriptionField = new TextField();
		maxDescriptionField.setImmediate(true);
		maxDescriptionField.setWidth("150");
		maxDescriptionField.setValidationVisible(true);
		maxDescriptionField.addValidator(notNullValidator);
		mainLayout.addComponent(maxDescriptionField);

		panel.setCaption("Likert Question");
		panel.setContent(mainLayout);

		return panel;
	}

	@Override
	public void writeXML(XMLStreamWriter writer) throws XMLStreamException {
		writer.writeEmptyElement("likertQuestion");
		writer.writeAttribute("name", textfieldValue.getValue());
		writer.writeAttribute("minBound", minBoundField.getValue());
		writer.writeAttribute("maxBound", maxBoundField.getValue());
		writer.writeAttribute("minDescription", minDescriptionField.getValue());
		writer.writeAttribute("maxDescription", maxDescriptionField.getValue());
	}

	@Override
	public boolean isValid() {
		return validateFields();
	}

	private boolean validateFields() {
		return minBoundField.isValid() && maxBoundField.isValid()
				&& textfieldValue.isValid() && maxDescriptionField.isValid()
				&& minDescriptionField.isValid();
	}
}
